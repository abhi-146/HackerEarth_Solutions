import java.util.*;
import java.util.Map.Entry;
 
 class EasyOne {
	
	private static int mod =1000000007;
	private static long[]F = new long[100009];
	
	private static long power(long a, long n) {
		long res =1;
		while(n>0) {
			if(n%2==0)
			{
				a = (a%mod*a%mod)%mod;
				n/=2;
			}
			else {
				res = (res%mod *a%mod)%mod;
				n--;
			}
		}
		
		return res;
	}
 
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		
		F[0] = F[1] = 1;
		for(int i=2; i<100009; i++)
			F[i] = (i*F[i-1])%mod;
		
		
		while(t-->0)
		{	
			String number= sc.next();
			HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
			
			for(int i=0; i<number.length(); i++)
			{
				int x = Character.getNumericValue(number.charAt(i));
				if(!map.containsKey(x))
					map.put(x, 1);
				else
				{
					int value = map.get(x);
					map.put(x, value+1);
				}
			}
			
			long res = F[number.length()]%mod;
			
			for(Entry<Integer, Integer> entry: map.entrySet())
			{
				int dig = entry.getValue();
				if(dig>1)
				{
					res = (res * power(F[dig], mod-2))%mod;
				}
			}
			System.out.println(res);
		}
		
	}
 
}
