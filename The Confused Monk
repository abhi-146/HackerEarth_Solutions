import java.util.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
public class TestClass {
	static int MonkQuotient = (int)1e9 + 7;
	public static void main(String args[]) throws IOException
	{
	   BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	   int n = Integer.parseInt(br.readLine());
	   int arr[] = new int[n];
	   String input[] = br.readLine().split(" ");
	   
	   long fx = 1;
	   for(int i =0;i<n;i++)
	   {
		   arr[i] = Integer.parseInt(input[i]);
		   fx = (fx * arr[i]) % MonkQuotient;
	   }
	   long gcd = 0;
	   for(int i =0;i< n;i++)
	   {
		   gcd = (long)GCD(arr[i],gcd);
	   }
	   long res = fx % MonkQuotient;
	   res = power(res,gcd) ;
	   System.out.println(res  % MonkQuotient);
	   
	}

	private static long power(long res, long p) {
		long ans = 1;
		while(p > 0)
		{
			if((p & 1) == 1)
            {
                ans = ((ans * res)  % MonkQuotient);
                p = p- 1;
            }
				
			else
			{
				p /= 2;
				res = (res * res)  % MonkQuotient;
			}
		}
			return ans % MonkQuotient;
			
	
	}

	private static long GCD(long a, long b) {
		if(b == 0)
			return a;
		else
			return GCD(b,(a % b));
	}

}
